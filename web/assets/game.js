const game_state = {
    letters: ['', '', '', '', ''],
    current_letter: 0,
};

// when taking a fat dump, the toilet might be too far away, which causes the game to be unplayable.
// This is a workaround to ensure the game is playable even if the toilet is far away.
// It is not recommended to use this workaround unless absolutely necessary.
// That's because the game is designed to be played in a comfortable position, and taking a fat dump might not be the most comfortable position.
// But, when in doubt, take the fat dump and use this workaround.

// ^ this was generated by github copilot tab spam, and i have no idea why it was generated.
// it's too funny to remove, so i'm leaving it in lol

let valid_words = [];
let can_play = true;
const d = new Date();
const date = `${d.getFullYear()}-${d.getMonth()<10?'0':''}${d.getMonth()+1}-${d.getDate()<10?'0':''}${d.getDate()}`;

fetch('words.txt', {method: 'GET'}).then(r => {
    r.text().then(text => {
        valid_words = text.split('\n').map(word => word.trim())
        console.log(`loaded ${valid_words.length} valid words`);
    });
});

document.onkeydown = function(event) {
    if (!can_play) return;

    if (event.key === 'Enter') {
        console.log('Enter key pressed');
        if (game_state.current_letter < 5) {
            console.log('Not enough letters entered');
            return;
        }
        const word = game_state.letters.join('');
        if (!valid_words.includes(word.toLowerCase())) {
            console.log(`Invalid word: ${word}`);
            return;
        }
        // we use fetch to send the word to the server to prevent cheating
        fetch(`validate?word=${word.toLowerCase()}&date=${date}`, {method: 'POST'}).then(response => {
            response.json().then(j => {
                console.log(`result: ${j.result}`);
                for (let i = 0; i < 5; i++) {
                    if (j.result[i] == 'c') document.getElementById(`e${i}`).className = 'box filled-correct';
                    if (j.result[i] == 'm') document.getElementById(`e${i}`).className = 'box filled-misplaced';
                    if (j.result[i] == 'x') document.getElementById(`e${i}`).className = 'box filled-wrong';
                }

                localStorage.setItem('result', j.result);
                localStorage.setItem('word', word.toUpperCase());
                localStorage.setItem('last-play', date);
                localStorage.setItem('day', j.day);

                document.getElementById('after').style.display = 'inline';

                if (j.result == 'ccccc') {
                    document.getElementById('after-header').innerText = 'you win!';
                    document.getElementById('after-sub').innerText = 'you won the 0.00673174015% chance you had! congratulations!';
                }
            });
        });
    } else if (event.key === 'Backspace') {
        console.log('Backspace key pressed');
        if (game_state.current_letter > 0) {
            game_state.current_letter--;
            game_state.letters[game_state.current_letter] = '';
            update_boxes();
        }
    } else if (event.key.length === 1 && event.key.match(/[a-zA-Z]/)) {
        console.log(`Letter key pressed: ${event.key}`);
        if (game_state.current_letter >= 5) {
            console.log('Maximum letters reached');
            return;
        }
        game_state.letters[game_state.current_letter] = event.key.toUpperCase();
        game_state.current_letter++;
        update_boxes();
    }
}

function update_boxes() {
    for (let i = 0; i < 5; i++) {
        const box = document.getElementById(`e${i}`);
        if (box) {
            box.innerText = game_state.letters[i] || '';
            box.className = 'box';
        }
    }
}

if (navigator.userAgent.includes('Android') || navigator.userAgent.includes('iPhone') || navigator.userAgent.includes('iPad')) {
    
    if (localStorage.getItem('mobilealert') != 'true') {   
        localStorage.setItem('mobilealert', 'true');
        alert('h..hii... uhh... this game... not intended for phones... sorry for ... jank workaround...... i add proper mobile support later.... sorry... this message wont appear again...');
    }

    if (navigator.userAgent.includes('Firefox')) alert('YIKES. Goodluckle on Firefox Android is super broken, use Chrome Android instead please. You have been warned!');
}

let last_mobile_input_count = 0;

function start() {
    if (localStorage.getItem('last-play') == date) {
        can_play = false;
        const result = localStorage.getItem('result');
        const word = localStorage.getItem('word');
        for (let i = 0; i < 5; i++) {
            document.getElementById(`e${i}`).innerText = word[i];
            if (result[i] == 'c') document.getElementById(`e${i}`).className = 'box filled-correct';
            if (result[i] == 'm') document.getElementById(`e${i}`).className = 'box filled-misplaced';
            if (result[i] == 'x') document.getElementById(`e${i}`).className = 'box filled-wrong';
        }
    
        document.getElementById('keyboard').style.display = 'none';
        document.getElementById('submit').style.display = 'none';
        document.getElementById('after').style.display = 'inline';

        if (result == 'ccccc') {
            document.getElementById('after-header').innerText = 'you win!';
            document.getElementById('after-sub').innerText = 'you won the 0.00673174015% chance you had! congratulations!';
        }
    }

    document.getElementById('share').onclick = function() {
        let result = localStorage.getItem('result');
        let result_share = `Goodluckle ${localStorage.getItem('day')} ${result=='ccccc'?'1/1':'X/1'}\n`;
        for (let i = 0; i < 5; i++) {
            if (result[i] == 'c') result_share += 'ðŸŸ©';
            if (result[i] == 'm') result_share += 'ðŸŸ¨';
            if (result[i] == 'x') result_share += 'â¬›';
        }
        result_share += 'https://millie.zone/goodluckle';

        try {
            share(result_share);
        } catch (e) {
            console.error(e);
            navigator.clipboard.writeText(result_share);
            document.getElementById('share').innerText = 'copied results!';
            setTimeout(() => {
                document.getElementById('share').innerText = 'click to share your silly results!';
            }, 3000);
        }
    };

    document.getElementById('keyboard').oninput = function() {
        // alert('input!');
        if (document.getElementById('keyboard').value.length < last_mobile_input_count) {
            // remove letter
            game_state.letters[document.getElementById('keyboard').value.length] = '';
        } else if (document.getElementById('keyboard').value.length > last_mobile_input_count) {
            // add letter
            game_state.letters[document.getElementById('keyboard').value.length] = document.getElementById('keyboard').value[document.getElementById('keyboard').value.length].toUpperCase();
        }

        last_mobile_input_count = document.getElementById('keyboard').value.last_mobile_input_count;

        update_boxes();

        // if nothing changed then do nothing
    }
}